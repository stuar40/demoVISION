##### Cargar tipo Empleado
CREATE   PROCEDURE `cargarTipoEmpleado`(IN nombreTipoEmpleado VARCHAR(45),IN descripcion VARCHAR(75),IN privilegioGrupo int)
BEGIN
     DECLARE nuevoID INT;
    DECLARE  contador int;
    DECLARE cant_Privilegios int;
    DECLARE Maxid varchar(11) default null;
	Select ifnull(max(idTipoEmpleado),0)+1 into Maxid from tipoempleado;
    insert into tipoempleado(idTipoEmpleado,rolTipoEmpleado,descripcionTipoEmpleado,estadoTipoEmpleado,grupoPrivilegioTipoEmpleado) values(Maxid,nombreTipoEmpleado,descripcion,'ACTIVO',privilegioGrupo);
    
    set contador = 1;
    Select Count(idPrivilegios) into cant_Privilegios from privilegios;
   
    while contador<=cant_Privilegios do
    INSERT INTO empleado_roles (TipoEmpleado_idTipoEmpleado, Privilegios_idPrivilegios, estadoEmpleado_roles) VALUES (Maxid, contador, 'INACTIVO');
	set contador=contador+1;
    end while;
    
    case privilegioGrupo
     when 1 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 3);
     when 2 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 4);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 6);
	when 3 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 2);
	when 4 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 3);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 4);
	when 5 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 3);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 4);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 6);
		
     when 6 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 3);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 4);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 5);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = Maxid) AND (Privilegios_idPrivilegios = 6);
     
    end case;
    
    
END



////Delete DetalleCompra_idDetalleCompra
CREATE  PROCEDURE `DELETEdetalleTemp`( IN varIdDetalletemp int ,	IN varUsuario int )
BEGIN

  DELETE FROM tmp_Detalles where idtmp_Detalles = varIdDetalletemp;  
  SELECT tmp.idtmp_Detalles, tmp.tmp_TipoMovimiento,tmp.tmp_codProducto,
		p.skuProducto,p.nombreProducto,tmp.tmp_cantidad,
        tmp.tmp_precio 
        FROM ssolucionesgt_testopticas.tmp_Detalles tmp 
        inner join producto p on tmp.tmp_codProducto=p.idProducto 
        where tmp.tmp_tknUsuario = varUsuario and tmp.tmp_TipoMovimiento = 'COMPRA' ;
    	
END


////////////////////////////////////////////////

CREATE   PROCEDURE `INSERTcomisionEmpleado`(IN varComision decimal(10,2),IN varDescripcion VARCHAR(75), IN varEstado VARCHAR(15))
BEGIN
  
	DECLARE Maxid varchar(11) default null;
    Select ifnull(max(idComisionEmpleado),0)+1 into Maxid from comisionempleado;
    
   INSERT INTO comisionempleado (idComisionEmpleado, ComisionEmpleado, descripcionComisionEmpleado, estadoComisionEmpleado) 
   VALUES (Maxid, varComision, varDescripcion,varEstado);

 

END

//////////////////////////////////////////////////////

CREATE   PROCEDURE `INSERTdetalleTemp`(  		IN vartipoMovimiento varchar(50), IN varidProductoCompra int ,	IN varcantidadProductoCompra int,
                                            IN varcostoProductoCompra decimal(10,2),	IN varUsuario varchar(175) ,
											IN varSucursal int)
BEGIN
	DECLARE Maxid varchar(11) default null;
	
    Select ifnull(max(idtmp_Detalles),0)+1 into Maxid from tmp_Detalles;
   
    
   INSERT INTO `tmp_Detalles` 
		   (`idtmp_Detalles`, `tmp_TipoMovimiento`, 
		   `tmp_codProducto`, `tmp_cantidad`, 
		   `tmp_precio`, `tmp_tknUsuario`, `tmp_idSucursal`) 
   VALUES (	Maxid, vartipoMovimiento,
			varidProductoCompra, varcantidadProductoCompra, 
            varcostoProductoCompra, varUsuario, varSucursal);

	SELECT tmp.idtmp_Detalles, tmp.tmp_TipoMovimiento,tmp.tmp_codProducto,
		p.skuProducto,p.nombreProducto,tmp.tmp_cantidad,
        tmp.tmp_precio 
        FROM ssolucionesgt_testopticas.tmp_Detalles tmp 
        inner join producto p on tmp.tmp_codProducto=p.idProducto 
        where tmp.tmp_tknUsuario = varUsuario and tmp.tmp_TipoMovimiento = 'COMPRA' ;
    
END

/////////////////////////////////////////////////////////

DROP PROCEDURE IF EXISTS INSERTgenerarCompra;
DELIMITER $$
CREATE  PROCEDURE `INSERTgenerarCompra`(  	IN varnoDocumentoCompra varchar(75) , IN varSucursal_idSucursal int ,
                                            IN varProveedor_idProveedor int,	IN varUsuario_idUsuario int )
BEGIN
	DECLARE factura INT;
    DECLARE registros INT; 
    DECLARE registroStock INT; 
    DECLARE Maxid_tblcompras varchar(11) default null;
    DECLARE Maxid_tblstock varchar(11) default null;
    DECLARE total DECIMAL(10,2);
    DECLARE subTotal DECIMAL(10,2);
    DECLARE impuestosTotal DECIMAL(10,2);
    DECLARE precioMinimoActual DECIMAL(10,2);
    DECLARE precioMinimoNuevo DECIMAL(10,2);
    DECLARE nuevaExistencia INT;
    DECLARE actualExistencia INT;
    DECLARE tmpCodProducto INT;
    DECLARE tmpCantidadProducto INT;
    DECLARE tmpPrecioProducto DECIMAL(10,2);
    DECLARE PrecioProductoVenta DECIMAL(10,2);
    DECLARE PrecioProductoPromo DECIMAL(10,2);
    DECLARE acumulador INT;
    DECLARE idStockUpdate INT;
    DECLARE FechaGTM DATETIME;
    DECLARE FechaResultado DATE; 
     
    set acumulador = 1;
    
   
    
    create temporary table IF NOT EXISTS tbl_tmpProductosCompra(
    id bigint NOT NULL auto_increment primary key,
    codProducto bigint,
    cantProducto int,
    preciProducto double);
    truncate table tbl_tmpProductosCompra;
    
	set registros  = (SELECT COUNT(*) FROM tmp_Detalles where tmp_tknUsuario = varUsuario_idUsuario and tmp_TipoMovimiento='COMPRA');
	IF registros > 0 THEN
    INSERT INTO  tbl_tmpProductosCompra (codProducto,cantProducto,preciProducto) SELECT tmp_codProducto,tmp_cantidad,tmp_precio  FROM tmp_Detalles where tmp_tknUsuario = varUsuario_idUsuario  and tmp_TipoMovimiento='COMPRA';
    
    Select ifnull(max(idCompras),0)+1 into Maxid_tblcompras from compras;
     SELECT convert_tz(now(),@@session.time_zone,'-06:00') into FechaGTM;
    SELECT DATE(FechaGTM) into FechaResultado;
    INSERT INTO `compras` (`idCompras`, `noDocumentoCompra`,`fechaCompra`,`estadoCompra`, 
			`Sucursal_idSucursal`, `Proveedor_idProveedor`, `Usuario_idUsuario`) 
            VALUES 
            (Maxid_tblcompras, varnoDocumentoCompra, FechaGTM,'ACTIVO', varSucursal_idSucursal,varProveedor_idProveedor, varUsuario_idUsuario);
            
            insert into detallecompra (`precioCompraDetalle`, `cantidadCompra`,
            `Compras_idCompras`, `Producto_idProducto`) SELECT  tmp_precio as precioCompraDetalle,
            tmp_cantidad as cantidadCompra,(Maxid_tblcompras) as Compras_idCompras,
            tmp_codProducto as Producto_idProducto FROM tmp_Detalles 
            where tmp_tknUsuario = varUsuario_idUsuario  and tmp_TipoMovimiento='COMPRA'; 
            
			WHILE acumulador <= registros DO
            SELECT codProducto,cantProducto,preciProducto INTO  tmpCodProducto, tmpCantidadProducto,tmpPrecioProducto from  tbl_tmpProductosCompra WHERE id = acumulador;
            set registroStock  = (SELECT count(*) FROM stock where Producto_idProducto = tmpCodProducto and  tipoStock = 1);
            
			IF registroStock > 0 THEN  #if de stock #Codigo para Actualizar en FIFO el stok del producto 
					SELECT idStock,stockVenta,precioMinimo into idStockUpdate,actualExistencia,precioMinimoActual from stock where Producto_idProducto = tmpCodProducto and   tipoStock = 1;
					SELECT precioVentaProducto,precioPromoProducto into PrecioProductoVenta,PrecioProductoPromo from producto  where idProducto = tmpCodProducto;
                    
					set subTotal = tmpCantidadProducto * tmpPrecioProducto;
                    set nuevaExistencia =tmpCantidadProducto + actualExistencia;
					set precioMinimoNuevo = ((precioMinimoActual*actualExistencia)+subTotal)/nuevaExistencia;
                    
                    
					UPDATE `detallecompra` SET 
					`subtotalCompraDetalle` = subTotal, 
					`estadoDetalle` = 'ACTIVO' 
					WHERE (`Producto_idProducto` = tmpCodProducto and `Compras_idCompras`= Maxid_tblcompras and `precioCompraDetalle`= tmpPrecioProducto);
					
                    
                    UPDATE `stock` SET  #`stockFactura` = 'StockAcumuladoGlobal', 
										`fechaStock` =FechaResultado,
                                        `stockVenta` = nuevaExistencia, `precioMinimo` = precioMinimoNuevo, 
										`precioVenta` = PrecioProductoVenta, `precioPromo` = PrecioProductoPromo
										 WHERE (`idStock` = idStockUpdate);

					set acumulador = acumulador+1;
                     
					ELSE  #else if de stock
                    #Codigo para insertar un nuevo stok en caso de que el producto sea nuevo y no tenga ningun stock
                    SELECT precioVentaProducto,precioPromoProducto into PrecioProductoVenta,PrecioProductoPromo from producto  where idProducto = tmpCodProducto;
                    
                    Select ifnull(max(idStock),0)+1 into Maxid_tblstock from stock;
                    set subTotal = tmpCantidadProducto * tmpPrecioProducto;
					
					UPDATE `detallecompra` SET 
					`subtotalCompraDetalle` = subTotal, 
					`estadoDetalle` = 'ACTIVO' 
					WHERE (`Producto_idProducto` = tmpCodProducto and `Compras_idCompras`= Maxid_tblcompras and `precioCompraDetalle`= tmpPrecioProducto);
					
                    SELECT idDetalleCompra into idStockUpdate  FROM detallecompra where `Producto_idProducto` = tmpCodProducto and `Compras_idCompras`= Maxid_tblcompras and `precioCompraDetalle`= tmpPrecioProducto;
                    INSERT INTO `stock` 
								(`idStock`,`fechaStock`, `stockFactura`, `stockVenta`, 
								`precioMinimo`, `precioVenta`, `precioPromo`, 
								`estadoStock`, `Producto_idProducto`, `Sucursal_idSucursal`, 
								`DetalleCompra_idDetalleCompra`, `tipoStock`) 
								VALUES 
								(Maxid_tblstock, FechaResultado,tmpCantidadProducto, tmpCantidadProducto, 
								tmpPrecioProducto, PrecioProductoVenta, PrecioProductoPromo, 
								'ACTIVO', tmpCodProducto, varSucursal_idSucursal, 
								idStockUpdate, '1');
					set acumulador = acumulador+1;
                    END IF; #End if de stock
					
                    END WHILE;
					
					Set total = (SELECT SUM(tmp_cantidad * tmp_precio) from tmp_Detalles WHERE tmp_tknUsuario = varUsuario_idUsuario  and tmp_TipoMovimiento='COMPRA');
					set impuestosTotal=0;
					UPDATE `compras` SET 
					`Subtotal` = total, 
					`impuestosCompra` = impuestosTotal, 
					`totalCompra` = total   WHERE (`idCompras` = Maxid_tblcompras);
					
					DELETE FROM tmp_Detalles WHERE tmp_tknUsuario = varUsuario_idUsuario  and tmp_TipoMovimiento='COMPRA';
					truncate table tbl_tmpProductosCompra;
					SELECT * FROM  compras where idCompras = Maxid_tblcompras;
                   

    ELSE
    Select 0;
    END IF;
    
END $$
DELIMITER $$


/////////////////////////////////////////////////////////////////////////
CREATE   PROCEDURE `INSERThorarioEmpleado`(IN varNombreHorario VARCHAR(45),IN varDiasHorario VARCHAR(50), IN varRangoHorario VARCHAR(50), IN varEstado VARCHAR(15))
BEGIN
  	DECLARE Maxid varchar(11) default null;
    Select ifnull(max(idHorario),0)+1 into Maxid from horario;
    
   INSERT INTO horario (idHorario, nombreHorario, diasHorario, tiempoHorario, estadoHorario)
   VALUES (Maxid, varNombreHorario, varDiasHorario,varRangoHorario,varEstado);
    
END

///////////////////////////////////////////////////////////////////////

CREATE   PROCEDURE `INSERTnuevoProducto`(    
											IN varskuProducto varchar(150) ,	IN varnombreProducto varchar(150) ,
                                            IN vartipoProducto varchar(75) ,	IN vardescripcionProducto varchar(150) ,
											IN varmarcaProducto varchar(75) ,	
                                            IN varpresentacionProducto varchar(75) , IN varestadoProducto varchar(15) ,
                                            IN varid_Categoria int,
                                            IN varstockMinimoProducto int,IN varprecioVentaProducto decimal(10,2),IN varprecioPromoProducto decimal(10,2))
BEGIN
	DECLARE Maxid varchar(11) default null;
    Select ifnull(max(idProducto),0)+1 into Maxid from producto;
    
	INSERT INTO `producto` 
	(`idProducto`, `skuProducto`, `nombreProducto`, 
	`tipoProducto`, `descripcionProducto`, `marcaProducto`, 
	`presentacionProducto`, `estadoProducto`, `Categoria_idCategoria`,
    `stockMinimoProducto`,`precioVentaProducto`,`precioPromoProducto`) 
	VALUES 
	(Maxid, varskuProducto, varnombreProducto, 
	vartipoProducto, vardescripcionProducto, varmarcaProducto, 
	varpresentacionProducto, varestadoProducto, varid_Categoria,
    varstockMinimoProducto,varprecioVentaProducto,varprecioPromoProducto );
    
	SELECT `idProducto`, `skuProducto`, `nombreProducto` from`producto` where idProducto=Maxid;
    
    
END

////////////////////////////////////////////////////////////////////////

CREATE   PROCEDURE `INSERTnuevoProveedor`(
									        IN varnombreProveedor varchar(150) ,
											IN varrazonSocialProveedor varchar(150) ,IN varnitProveedor varchar(45) ,		
											IN vardireccionProveedor varchar(75) , IN varciudadProveedor varchar(75) , 
                                            IN varpaisProveedor varchar(75) , IN varemailProveedor varchar(75) ,
                                            IN vartelefono1Proveedor varchar(25) ,	IN vartelefono2Proveedor varchar(25) ,
											IN vardescripcionProveedor varchar(150) 	)
BEGIN
	DECLARE Maxid varchar(11) default null;
	DECLARE idEmpresaSistema varchar(11) default null;
    Select ifnull(max(idProveedor),0)+1 into Maxid from proveedor;
    Select ifnull(max(idEmpresa),0) into idEmpresaSistema from empresa;
   
  
  	INSERT INTO `proveedor` 
	(`idProveedor`, `nombreProveedor`, `razonProveedor`, `nitProveedor`, `direccionProveedor`, 
	`ciudadProveedor`, `paisProveedor`, `correoProveedor`, `telefonoProveedor`, `telefono2Proveedor`, 
	`descripcionProveedor`, `Empresa_idEmpresa`) 
	VALUES 
	(Maxid, varnombreProveedor, varrazonSocialProveedor, varnitProveedor, vardireccionProveedor, 
	varciudadProveedor, varpaisProveedor, varemailProveedor, vartelefono1Proveedor, vartelefono2Proveedor,
	 vardescripcionProveedor, idEmpresaSistema);
    
END

///////////////////////////////////////////////////////////////////////////////////////

CREATE   PROCEDURE `INSERTnuevoUsuario`(
									        IN varpriNombre varchar(50) ,		IN varsegNombre varchar(45) ,
											IN varpriApellido varchar(45) ,		IN varsegApellido varchar(75) ,
											IN varidentificacion varchar(75) ,	IN varsexo varchar(15) ,
											IN vardireccion varchar(100) ,		IN vartelefono varchar(25) ,
											IN varcorreo varchar(50) ,			IN varfechaNac date, 
											IN varUser varchar(20) ,			IN varpass varchar(150) ,
											IN vardescripcion varchar(150) ,	IN varestado varchar(15) ,
											IN varidSueldoEmpleado int(11) ,	IN varidComisionEmpleado int(11) ,
											IN varidTipoEmpleado int(11) ,		IN varidSucursal int(11) ,
											IN varidHorario int(11)		)
BEGIN
	DECLARE Maxid varchar(11) default null;
    Select ifnull(max(idUsuario),0)+1 into Maxid from usuario;
    
  	INSERT INTO usuario
	(idUsuario,`priNombreUsuario`, `segNombreUsuario`, `priApellidoUsuario`, `segApellidoUsuario`, `identificacionUsuario`, 
	`sexoUsuario`, `direccionUsuario`, `telefonoUsuario`, `correoUsuario`, `fechaNacUsuario`, `usuario`, 
	`passUsuario`, `descripcionUsuario`, `estadoUsuario`, `SueldoEmpleado_idSueldoEmpleado`, 
	`ComisionEmpleado_idComisionEmpleado`, `TipoEmpleado_idTipoEmpleado`, `Sucursal_idSucursal`, `Horario_idHorario`) 
	VALUES (Maxid,varpriNombre, varsegNombre, varpriApellido, varsegApellido,varidentificacion, varsexo, vardireccion, 
	vartelefono, varcorreo, varfechaNac, varUser, varpass, vardescripcion, varestado, varidSueldoEmpleado, varidComisionEmpleado, 
    varidTipoEmpleado, varidSucursal, varidHorario);
    
END

////////////////////////////////////////

CREATE   PROCEDURE `INSERTsueldoEmpleado`(IN varSueldoEmpleado decimal(10,2),IN varDescripcion VARCHAR(75), IN varEstado VARCHAR(15))
BEGIN
  
	DECLARE Maxid varchar(11) default null;
    Select ifnull(max(idSueldoEmpleado),0)+1 into Maxid from sueldoempleado;
    
   INSERT INTO sueldoempleado (idSueldoEmpleado, SueldoEmpleado, descripcionSueldoEmpleado, estadoSueldoEmpleado) 
   VALUES (Maxid, varSueldoEmpleado, varDescripcion,varEstado);

 

END

/////////////////////////////////////////////////
CREATE   PROCEDURE `SELECTsiExiste`(IN varTabla VARCHAR(45),
																				IN varCampo VARCHAR(45), 
                                                                                IN varDato VARCHAR(75),INOUT existe2 INT)
BEGIN
	set @existe2=0;
	set @sql= concat('SELECT COUNT(*) into',  existe2 ,' from  ', varTabla ,' where ', varCampo ,' = ', varDato); 
	PREPARE stmt FROM @sql;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
END

///////////////////////////////////////////////////////

CREATE   PROCEDURE `UPDATEcomisionEmpleado`(IN varIDcomisionEmpleado int, IN varComisionEmpleado decimal(10,2),IN varDescripcion VARCHAR(75), IN varEstado VARCHAR(15))
BEGIN
  	update comisionempleado	set
	comisionempleado.ComisionEmpleado = varComisionEmpleado,
	comisionempleado.descripcionComisionEmpleado = varDescripcion, 
	comisionempleado.estadoComisionEmpleado = varEstado 
	where comisionempleado.idComisionEmpleado = varIDcomisionEmpleado;
    
END

//////////////////////////////////////////////////////////
CREATE   PROCEDURE `UPDATEhorario`(IN varIDhorario int, IN varNombreHorario VARCHAR(45),IN varDiasHorario VARCHAR(50),IN varRangoHorario VARCHAR(50), IN varEstado VARCHAR(15))
BEGIN
  	update horario	set
	horario.nombreHorario = varNombreHorario,
	horario.diasHorario = varDiasHorario, 
	horario.tiempoHorario = varRangoHorario,
    horario.estadoHorario = varEstado
	where horario.idHorario = varIDhorario;
    
END
/////////////////////////////////////////////////////

CREATE   PROCEDURE `UPDATEproducto`(  		IN varidProducto int, IN varskuProducto varchar(150) ,	IN varnombreProducto varchar(150) ,
                                            IN vartipoProducto varchar(75) ,	IN vardescripcionProducto varchar(150) ,
											IN varmarcaProducto varchar(75) ,	
                                            IN varpresentacionProducto varchar(75) , IN varestadoProducto varchar(15) ,
                                            IN varid_Categoria int,
                                            IN varstockMinimoProducto int,IN varprecioVentaProducto decimal(10,2),IN varprecioPromoProducto decimal(10,2))
BEGIN
	
    
	UPDATE `producto` SET 
    `skuProducto` = varskuProducto, `nombreProducto` = varnombreProducto, 
    `tipoProducto` = vartipoProducto, `descripcionProducto` = vardescripcionProducto, 
    `marcaProducto` = varmarcaProducto, `presentacionProducto` =varpresentacionProducto, 
    `estadoProducto` = varestadoProducto, `Categoria_idCategoria` = varid_Categoria, 
    `stockMinimoProducto` = varstockMinimoProducto, `precioVentaProducto` = varprecioVentaProducto, 
    `precioPromoProducto` = varprecioPromoProducto WHERE (`idProducto` = varidProducto);

    
END

//////////////////////////////////////////////////////////

CREATE   PROCEDURE `UPDATEproveedor`(      IN varidProveedor int ,IN varnombreProveedor varchar(150) ,
											IN varrazonSocialProveedor varchar(150) ,IN varnitProveedor varchar(45) ,		
											IN vardireccionProveedor varchar(75) , IN varciudadProveedor varchar(75) , 
                                            IN varpaisProveedor varchar(75) , IN varemailProveedor varchar(75) ,
                                            IN vartelefono1Proveedor varchar(25) ,	IN vartelefono2Proveedor varchar(25) ,
											IN vardescripcionProveedor varchar(150) 	)
BEGIN
	UPDATE `proveedor` SET 
    `nombreProveedor` = varnombreProveedor, `razonProveedor` = varrazonSocialProveedor, 
    `nitProveedor` = varnitProveedor, `direccionProveedor` = vardireccionProveedor, 
    `ciudadProveedor` = varciudadProveedor, `paisProveedor` = varpaisProveedor,
    `correoProveedor` = varemailProveedor, `telefonoProveedor` = vartelefono1Proveedor, 
    `telefono2Proveedor` = vartelefono2Proveedor, `descripcionProveedor` = vardescripcionProveedor 
    WHERE (`idProveedor` = varidProveedor);
    
END

/////////////////////////////////////////////////////////////////////


CREATE   PROCEDURE `UPDATEsueldoEmpleado`(IN varIDSueldoEmpleado int, IN varSueldoEmpleado decimal(10,2),IN varDescripcion VARCHAR(75), IN varEstado VARCHAR(15))
BEGIN
  	update sueldoempleado	set
	sueldoempleado.SueldoEmpleado = varSueldoEmpleado,
	sueldoempleado.descripcionSueldoEmpleado = varDescripcion, 
	sueldoempleado.estadoSueldoEmpleado = varEstado 
	where sueldoempleado.idSueldoEmpleado = varIDSueldoEmpleado;
    
END

///////////////////////////////////////////////////////////////////


CREATE   PROCEDURE `UPDATEtipoEmpleado`(IN idTipoEmpleado int,IN roltipoEmpleado VARCHAR(45),
									IN descripcionTipoEmpleado VARCHAR(75),IN estadoTipoEmpleado VARCHAR(10),IN privilegioGrupo VARCHAR(10))
BEGIN

update tipoempleado
set
tipoempleado.rolTipoEmpleado = roltipoEmpleado,
tipoempleado.descripcionTipoEmpleado = descripcionTipoEmpleado, 
tipoempleado.estadoTipoEmpleado = estadoTipoEmpleado, 
tipoempleado.grupoPrivilegioTipoEmpleado = privilegioGrupo 
where tipoempleado.idTipoEmpleado = idTipoEmpleado;

case privilegioGrupo
     when 1 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 3);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 4);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 5);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 6);
        

        
     when 2 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 3);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 4);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 5);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 6);
	when 3 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 3);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 4);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 5);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 6);
	when 4 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 3);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 4);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 5);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 6);
	when 5 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 3);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 4);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'INACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 5);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 6);
		
     when 6 then 
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 1);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 2);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 3);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 4);
        UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 5);
		UPDATE empleado_roles SET estadoEmpleado_roles = 'ACTIVO' WHERE (TipoEmpleado_idTipoEmpleado = idTipoEmpleado) AND (Privilegios_idPrivilegios = 6);
     
    end case;
END